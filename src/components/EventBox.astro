---
import {format} from "date-fns";
import {getEntry} from "astro:content";
const {gridId, eventId} = Astro.props;
const event = await getEntry("events", eventId);
const isDev = import.meta.env.DEV;
const basePath = isDev ? "/bvw-site" : ""
if (!event || !event.rendered) {
    throw Error("No event found for eventId: " + eventId);
}
let eventBoxId
let lineClamp
if (gridId) {
    eventBoxId = gridId + "-" + event.id;
    lineClamp = "8";
} else {
    eventBoxId = "SOLO-" + event.id;
    lineClamp = "none";
}
---

<div class="eventBox" id={eventBoxId}>
    <h2><a href={`${basePath}/events/${event.id}`}>{event.data.title}</a></h2>
    <div class="eventDetails">
        <div class="eventParam">
            <h4>Start time: </h4>
            <p>{format(new Date(event.data.start), 'E do h:mma')}</p>
        </div>
        <div class="eventParam">
            <h4>Location: </h4>
            <p>{event.data.location}</p>
        </div>
        <div class="eventParam">
            <h4>Price: </h4>
            <p>{event.data.price}</p>
        </div>
    </div>
    <div class="eventText" set:html={event.rendered.html}></div>

    <div class="readMoreBox" >
        <a class="readMore" href={`${basePath}/events/${event.id}`} hidden>Read More</a>
    </div>


</div>

<style lang="scss" define:vars={{ lineClamp }}>
  .eventBox {
    --inside-colour: var(--body-background-colour-alt);
    --gap-colour: var(--body-background-colour);
    --drop-shadow-colour: var(--accent-colour);
    --border-colour: var(--body-text-colour);

    container-type: inline-size;
    padding: 1rem;
    background: var(--inside-colour);
    border-radius: 1rem;
    border: 0.2rem solid var(--border-colour);
    box-shadow: 0.6rem 0.55rem 0 0 var(--gap-colour), 1.2rem 1.1rem 0 0 var(--drop-shadow-colour);
  }

  .eventText {
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: var(--lineClamp);
    overflow: hidden;
  }

  .eventDetails {
    display: flex;
    justify-content: space-between;
  }

  .eventParam {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  p, h4 {
    margin: 0;
  }

  a {
    text-decoration: none;
    color: var(--body-text-colour-alt);
  }
  a:hover {
   color: var(--accent-colour);
  }

  .readMoreBox {
    display: flex;
    justify-content: flex-end;
  }

  .readMore {
    justify-self: right;
    color: var(--accent-colour);
    font-weight: bold;
  }

  @container (width < 40rem) {
    .eventParam {
      flex-direction: column;
    }
  }

  @container (width < 20rem) {
    .eventParam {
      flex-direction: row;
      margin: 0;
    }

    .eventDetails {
      display: flex;
      flex-direction: column;
      justify-content: center;
    }
  }
</style>
