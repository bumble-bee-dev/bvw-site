---
import {format} from "date-fns";
import {getEntry} from "astro:content";
const {gridId, eventId} = Astro.props;
const event = await getEntry("events", eventId);
const isDev = import.meta.env.DEV;
const basePath = isDev ? "/bvw-site" : ""
if (!event || !event.rendered) {
    throw Error("No event found for eventId: " + eventId);
}
const eventBoxId = gridId + "-" + event.id;
---

<div class="eventBox" id={eventBoxId}>
    <h2><a href={`${basePath}/events/${event.id}`}>{event.data.title}</a></h2>
    <div class="eventDetails">
        <div class="eventParam">
            <h4>Start time: </h4>
            <p>{format(new Date(event.data.start), 'E do h:mma')}</p>
        </div>
        <div class="eventParam">
            <h4>Location: </h4>
            <p>{event.data.location}</p>
        </div>
        <div class="eventParam">
            <h4>Price: </h4>
            <p>{event.data.price}</p>
        </div>
    </div>
    <div class="eventText" set:html={event.rendered.html}></div>

    <div class="readMoreBox" >
        <a class="readMore" href="/events" hidden>Read More</a>
    </div>

    <script define:vars={{eventId: eventBoxId}}>
        function detectIsOverflow(element) {
            return element.scrollHeight > element.clientHeight
        }
        const eventBox = document.getElementById(eventId);
        const eventText = eventBox.getElementsByClassName("eventText")[0];
        const readMore = eventBox.getElementsByClassName("readMore")[0];

        const is_content_overflow = detectIsOverflow(eventText);

        readMore.hidden = !is_content_overflow;

        console.log("eventBox: " + eventBox.id + " | is_content_overflow " + is_content_overflow)
    </script>
</div>

<style lang="scss">
  .eventBox {
    container-type: inline-size;
    padding: 1rem;
    background: var(--primary-main-colour);
    border-radius: 1rem;
    border: 0.2rem solid var(--secondary-main-colour);
    box-shadow: 0 0 0 0.5rem var(--primary-main-colour), 1.2rem 1.1rem 0 0 var(--primary-accent-colour);
  }

  .eventText {
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 8;
    overflow: hidden;
  }

  .eventDetails {
    display: flex;
    justify-content: space-between;
  }

  .eventParam {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  p, h4 {
    margin: 0;
  }

  a {
    text-decoration: none;
    color: var(--secondary-main-colour);
  }
  a:hover {
   color: var(--primary-accent-colour);
  }

  .readMoreBox {
    display: flex;
    justify-content: flex-end;
  }

  .readMore {
    justify-self: right;
    color: var(--primary-accent-colour);
    font-weight: bold;
  }

  @container (width < 40rem) {
    .eventParam {
      flex-direction: column;
    }
  }

  @container (width < 20rem) {
    .eventParam {
      flex-direction: row;
      margin: 0;
    }

    .eventDetails {
      display: flex;
      flex-direction: column;
      justify-content: center;
    }
  }
</style>
